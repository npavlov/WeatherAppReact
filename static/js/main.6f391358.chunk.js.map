{"version":3,"sources":["components/Nav/Nav.tsx","components/Nav/index.ts","Controls/Basic.tsx","Helpers/ColorPicker.ts","Helpers/DateFormatter.ts","components/Today/Today.tsx","components/Today/index.ts","components/Week/Week.tsx","components/Week/index.ts","constants/index.ts","AC/index.ts","components/Spinner/index.ts","components/Spinner/Spinner.tsx","context/index.ts","context/WeatherContext.ts","components/App/index.ts","components/App/App.tsx","sagas/index.ts","reducers/loadingReducer.ts","reducers/todayReducer.ts","reducers/index.ts","store/index.ts","service/WeatherService.ts","service/index.ts","index.tsx"],"names":["Nav","withRouter","_ref","location","Button","match","styled","button","_templateObject","props","selected","css","_templateObject2","contains","path","v","endsWith","react_default","a","createElement","react_router_dom","to","pathname","ImgStyled","img","Basic_templateObject","BigText","p","Basic_templateObject2","SmallText","_templateObject3","Break","div","_templateObject4","getColorByAbbr","x","formatNumber","slice","Today","forecastSelector","createSelector","forecast","MiddleImage","Today_templateObject","weather","useSelector","days","length","_weather$days$","pic","temp_avg","TopBlock","Today_templateObject2","MiddleBlock","Today_templateObject3","BottomBlock","Today_templateObject4","Space","_templateObject5","Fragment","src","alt","toFixed","Date","getHours","getMinutes","timezone","WeekDay","_props$day","day","applicable_date","weather_state_abbr","temp_min","temp_max","LittleImage","Week_templateObject","Block","Week_templateObject2","color","Week_templateObject3","Left","Week_templateObject4","TopDiv","Week_templateObject5","BottmonDiv","_templateObject6","Right","_templateObject7","VerticallyCentered","_templateObject8","toLocaleDateString","weekday","date","month","getDateFormatted","style","clear","Week","renderBlock","map","Week_WeekDay","key","id","messages","LOAD","LOAD_SUCCESS","LOAD_FAIL","loadTodayCast","service","latitude","longtitude","type","payload","setTodayCast","info","setError","error","Spinner","className","WeatherContext","React","createContext","undefined","App","weatherService","useContext","dispatch","useDispatch","useEffect","navigator","geolocation","getCurrentPosition","position","_position$coords","coords","longitude","loadingSelector","loading","spinnerBlock","components_Spinner","tabsBlock","react_router","component","exact","render","dayAbbr","backgroundColor","height","background","components_Nav","LoaderSaga","rootSaga","action","_action$payload","woeid","data","regenerator_default","wrap","_context","prev","next","call","GetLocation","sent","console","log","FetchWeather","put","t0","stop","_marked","_context2","takeEvery","_marked2","loadReducer","state","arguments","todayReducer","title","Object","objectSpread","rootReducer","combineReducers","errorReducer","configureStore","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","run","fetchUrl","process","WEATHER_FETCH_ADDRESS","picUrl","WEATHER_PIC_URL","WeatherService","Promise","res","rej","fetch","concat","method","headers","Content-Type","then","ok","Error","json","result","consolidated_weather","forEach","t","shorten","min_temp","the_temp","max_temp","push","catch","err","rootElement","document","getElementById","react","context","Provider","value","react_redux_es"],"mappings":"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","file":"static/js/main.6f391358.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link, withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\n\tinterface IButtonProps {\r\n    selected: boolean;\r\n\t}\r\n\r\nconst Nav = ({ location, match }: RouteComponentProps) => {\r\n\r\n\t\r\n  const Button = styled.button<IButtonProps>`\r\n    background: transparent;\r\n    border-radius: 15px;\r\n    border: 0;\r\n    color: black;\r\n    margin: 0.5em;\r\n    margin-top: 3em;\r\n    padding: 0.25em 1em;\r\n    font-weight: 700;\r\n    font-size: 1em;\r\n    ${(props: IButtonProps) =>\r\n      props.selected &&\r\n      css`\r\n        background: gray;\r\n        color: white;\r\n        font-weight: 400;\r\n      `};\r\n  `;\r\n\r\n  const contains = (path : any, v: any) => path.endsWith(v);\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/day\">\r\n        <Button selected={contains(location.pathname, \"day\")}>Day</Button>\r\n      </Link>\r\n      <Link to=\"/week\">\r\n        <Button selected={contains(location.pathname, \"week\")}>Week</Button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Nav);\r\n","import Nav from \"./Nav\";\r\n\r\nexport default Nav;\r\n","import styled from \"styled-components\";\r\n\r\nconst ImgStyled = styled.img`\r\n  filter: drop-shadow(3px 3px 2px rgba(0, 0, 0, 0.4));\r\n`;\r\n\r\nconst BigText = styled.p`\r\n  font-size: 3rem;\r\n`;\r\n\r\nconst SmallText = styled.p`\r\n  margin: 0;\r\n`;\r\n\r\nconst Break = styled.div`\r\n  flex-basis: 100%;\r\n  height: 0;\r\n`;\r\n\r\nexport { ImgStyled, BigText, SmallText, Break };\r\n","const getColorByAbbr = (x : string) => {\r\n  switch (x) {\r\n    case \"c\":\r\n      return \"#FFF8DE\";\r\n    case \"hc\":\r\n      return \"#F9F9F9\";\r\n    case \"s\":\r\n      return \"#F9F9F9\";\r\n    case \"hr\":\r\n      return \"#E9E9E9\";\r\n    case \"lc\":\r\n      return \"#F7FCFF\";\r\n    case \"sn\":\r\n      return \"#EEF6F9\";\r\n    case \"lr\":\r\n      return \"#EAEAEA\";\r\n    default:\r\n      return \"#F9F9F9\";\r\n  }\r\n};\r\n\r\nexport default getColorByAbbr;\r\n","const formatNumber = (x: number) => (\"0\" + x).slice(-2);\r\nconst getFormatedDate = (x: Date) =>\r\n  formatNumber(x.getHours()) + \":\" + formatNumber(x.getMinutes());\r\n\r\nconst getDayName = (date: Date) => {\r\n  return date.toLocaleDateString(\"en-US\", { weekday: \"long\" });\r\n};\r\n\r\nconst getDateFormatted = (date: Date) => {\r\n  return date.toLocaleDateString(\"en-US\", { month: \"short\", day: \"2-digit\" });\r\n};\r\nexport { getFormatedDate, getDayName, getDateFormatted };\r\n","import React from \"react\";\r\nimport { createSelector } from \"reselect\";\r\nimport styled from \"styled-components\";\r\nimport { IWeatherState } from \"../../Interfaces/IWeatherState\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ImgStyled, BigText, SmallText, Break } from \"../../Controls\";\r\nimport { getFormatedDate } from \"../../Helpers\";\r\n\r\nconst Today = () => {\r\n  const forecastSelector = createSelector(\r\n    (x: any) => x.forecast,\r\n    (x: IWeatherState) => x\r\n  );\r\n\r\n  const MiddleImage = styled(ImgStyled)`\r\n    width: 10rem;\r\n    margin: 1rem;\r\n    margin-top: 3rem;\r\n  `;\r\n\r\n  const weather = useSelector(forecastSelector);\r\n\r\n  if (weather.days.length === 0) return <div />;\r\n\r\n  const { pic, temp_avg } = weather.days[0];\r\n\r\n  const TopBlock = styled.div`\r\n    height: 10%;\r\n  `;\r\n\r\n  const MiddleBlock = styled.div`\r\n    height: 60%;\r\n    display: flex;\r\n    align-items: flex-end;\r\n    justify-content: center;\r\n  `;\r\n\r\n  const BottomBlock = styled.div`\r\n    height: 15%;\r\n    display: flex;\r\n    align-items: flex-end;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n  `;\r\n\r\n  const Space = styled(Break)`\r\n    height: 1rem;\r\n  `;\r\n\r\n  return (\r\n    <>\r\n      <TopBlock>\r\n        <MiddleImage src={pic} alt=\"today\" />\r\n      </TopBlock>\r\n      <MiddleBlock>\r\n        <BigText>{temp_avg.toFixed()}°</BigText>\r\n      </MiddleBlock>\r\n      <BottomBlock>\r\n        <SmallText>{getFormatedDate(new Date())}</SmallText>\r\n        <Break />\r\n        <SmallText>{weather.timezone}</SmallText>\r\n        <Space />\r\n      </BottomBlock>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Today;\r\n","import Today from \"./Today\";\r\n\r\nexport default Today;\r\n","import React from \"react\";\r\nimport { createSelector } from \"reselect\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { IWeatherState, IDate } from \"../../Interfaces/IWeatherState\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ImgStyled, SmallText, Break } from \"../../Controls\";\r\nimport { getDayName, getDateFormatted, getColorByAbbr } from \"../../Helpers\";\r\n\r\nconst WeekDay = (props: { day: IDate }) => {\r\n  const {\r\n    pic,\r\n    applicable_date,\r\n    weather_state_abbr,\r\n    temp_min,\r\n    temp_max\r\n  } = props.day;\r\n\r\n  const LittleImage = styled(ImgStyled)`\r\n    width: 3rem;\r\n    margin: 1rem;\r\n  `;\r\n\r\n  const Block = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    ${(props: any) => {\r\n      return (\r\n        props.color &&\r\n        css`\r\n          background-color: ${props.color};\r\n        `\r\n      );\r\n    }};\r\n  `;\r\n\r\n  const Left = styled.div`\r\n    margin-left: 2rem;\r\n    text-align: left;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex-grow: 1;\r\n  `;\r\n\r\n  const TopDiv = styled(SmallText)`\r\n    padding-top: 20px;\r\n  `;\r\n  const BottmonDiv = styled(SmallText)`\r\n    padding-bottom: 20px;\r\n  `;\r\n\r\n  const Right = styled.div`\r\n    padding-right: 2rem;\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: flex-end;\r\n  `;\r\n\r\n  const VerticallyCentered = styled(SmallText)`\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    margin-right: 1rem;\r\n  `;\r\n\r\n  return (\r\n    <Block color={getColorByAbbr(weather_state_abbr)}>\r\n      <Left>\r\n        <TopDiv>{getDayName(applicable_date)}</TopDiv>\r\n        <Break />\r\n        <BottmonDiv>{getDateFormatted(applicable_date)}</BottmonDiv>\r\n      </Left>\r\n      <Right>\r\n        <VerticallyCentered>\r\n          {temp_max.toFixed()}°/{temp_min.toFixed()}°\r\n        </VerticallyCentered>\r\n        <div>\r\n          <LittleImage src={pic} alt=\"pic\" />\r\n        </div>\r\n      </Right>\r\n      <div style={{ clear: \"both\" }} />\r\n    </Block>\r\n  );\r\n};\r\n\r\nconst Week = () => {\r\n  const forecastSelector = createSelector(\r\n    (x: any) => x.forecast,\r\n    (x: IWeatherState) => x\r\n  );\r\n\r\n  const weather = useSelector(forecastSelector);\r\n\r\n  if (weather.days.length === 0) return <div />;\r\n\r\n  const renderBlock = weather.days.map(x => <WeekDay day={x} key={x.id} />);\r\n\r\n  return <div>{renderBlock}</div>;\r\n};\r\n\r\nexport default Week;\r\n","import Week from \"./Week\";\r\n\r\nexport default Week;\r\n","const messages = {\r\n  LOAD: \"LOAD_REQ\",\r\n  LOAD_SUCCESS: \"LOAD_SUCCESS\",\r\n  LOAD_FAIL: \"LOAD_FAIL\"\r\n};\r\n\r\nexport default messages;\r\n","import messages from \"../constants\";\r\nimport { IWeatherService } from \"../Interfaces/IWeatherService\";\r\n\r\nconst loadTodayCast = (\r\n  service: IWeatherService,\r\n  latitude: number,\r\n  longtitude: number\r\n) => ({\r\n  type: messages.LOAD,\r\n  payload: {\r\n    service: service,\r\n    latitude: latitude,\r\n    longtitude: longtitude\r\n  }\r\n});\r\n\r\nconst setTodayCast = (info: any)=> ({\r\n  type: messages.LOAD_SUCCESS,\r\n  payload: info\r\n});\r\n\r\nconst setError = (error: any) => ({\r\n  type: messages.LOAD_FAIL,\r\n  payload: error\r\n});\r\n\r\nexport { loadTodayCast, setTodayCast, setError };\r\n","import Spinner from \"./Spinner\";\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"lds-spinner\">\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import WeatherContext from \"./WeatherContext\";\r\n\r\nexport default WeatherContext;\r\n","import React from \"react\";\r\nimport { IWeatherService } from \"../Interfaces/IWeatherService\";\r\n\r\nconst WeatherContext = React.createContext<IWeatherService>(\r\n  (undefined as any) as IWeatherService\r\n);\r\n\r\nexport default WeatherContext;\r\n","import App from \"./App\";\r\n\r\nexport default App;\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Nav from \"../Nav\";\r\nimport Today from \"../Today\";\r\nimport Week from \"../Week\";\r\nimport { IWeatherService } from \"../../Interfaces/IWeatherService\";\r\nimport { IWeatherState } from \"../../Interfaces/IWeatherState\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loadTodayCast } from \"../../AC\";\r\nimport { createSelector } from \"reselect\";\r\nimport Spinner from \"../Spinner\";\r\nimport { getColorByAbbr } from \"../../Helpers\";\r\nimport WeatherContext from \"../../context\";\r\n\r\nexport default function App() {\r\n  const weatherService: IWeatherService = useContext(WeatherContext);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const loadRequest = (position : Position) => {\r\n      const { latitude, longitude } = position.coords;\r\n\r\n      dispatch(loadTodayCast(weatherService, latitude, longitude));\r\n    };\r\n\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(loadRequest);\r\n    }\r\n  }, []);\r\n\r\n  const forecastSelector = createSelector(\r\n    (x: any) => x.forecast,\r\n    (x: IWeatherState) => x\r\n  );\r\n\r\n  const loadingSelector = createSelector(\r\n    (x: any) => x.loading,\r\n    x => x\r\n  );\r\n\r\n  const loading = useSelector(loadingSelector);\r\n\r\n  const weather = useSelector(forecastSelector);\r\n\r\n  const spinnerBlock = loading && <Spinner />;\r\n\r\n  const tabsBlock = !loading && (\r\n    <Switch>\r\n      <Route component={Today} path=\"/day\" exact />\r\n      <Route component={Week} path=\"/week\" exact />\r\n      <Route path=\"/\" exact render={() => <Redirect to=\"/day\" />} />\r\n    </Switch>\r\n  );\r\n\r\n  const dayAbbr =\r\n    weather.days.length > 0 ? weather.days[0].weather_state_abbr : \"na\";\r\n\r\n  const backgroundColor = getColorByAbbr(dayAbbr);\r\n\r\n  return (\r\n    <div style={{ height: \"100%\", background: backgroundColor }}>\r\n      {spinnerBlock}\r\n      <Nav />\r\n      {tabsBlock}\r\n    </div>\r\n  );\r\n}\r\n","import messages from \"../constants\";\r\nimport { takeEvery, call, put } from \"@redux-saga/core/effects\";\r\nimport { setTodayCast, setError } from \"../AC\";\r\nimport { IWeatherService } from \"../Interfaces/IWeatherService\";\r\n\r\nfunction* LoaderSaga(action:any) {\r\n  const { service, latitude, longtitude } = action.payload;\r\n\r\n  try {\r\n    const woeid = yield call(service.GetLocation, latitude, longtitude);\r\n    console.log(woeid);\r\n    const data = yield call(service.FetchWeather, woeid);\r\n    yield put(setTodayCast(data));\r\n  } catch (err) {\r\n    yield put(setError(err));\r\n  }\r\n}\r\n\r\nfunction* rootSaga() {\r\n  yield takeEvery(messages.LOAD, LoaderSaga);\r\n}\r\n\r\nexport default rootSaga;\r\n","import messages from \"../constants\";\r\n\r\nconst loadReducer = (state = false, action : any) => {\r\n  switch (action.type) {\r\n    case messages.LOAD:\r\n      return true;\r\n    case messages.LOAD_FAIL:\r\n    case messages.LOAD_SUCCESS:\r\n      return false;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default loadReducer;\r\n","import messages from \"../constants\";\r\nimport { IWeatherState } from \"../Interfaces/IWeatherState\";\r\n\r\ninterface IAction {\r\n  type: string;\r\n  payload: IWeatherState;\r\n}\r\n\r\nconst todayReducer = (\r\n  state: IWeatherState = {\r\n    title: \"n/a\",\r\n    timezone: \"n/a\",\r\n    days: []\r\n  },\r\n  action: IAction\r\n) => {\r\n  if (action.type === messages.LOAD_SUCCESS) {\r\n    return { ...state, ...action.payload };\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default todayReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport loadReducer from \"./loadingReducer\";\r\nimport todayReducer from \"./todayReducer\";\r\nimport errorReducer from \"./todayReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  loading: loadReducer,\r\n  forecast: todayReducer,\r\n  error: errorReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootSaga from \"../sagas\";\r\nimport rootReducer from \"../reducers\";\r\n\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    compose(applyMiddleware(sagaMiddleware))\r\n  );\r\n\r\n  sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","import { IWeatherService } from \"../Interfaces/IWeatherService\";\r\nimport { IWeatherState, IDate} from \"../Interfaces/IWeatherState\";\r\n\r\nconst fetchUrl = process.env.WEATHER_FETCH_ADDRESS;\r\nconst picUrl = process.env.WEATHER_PIC_URL;\r\n\r\nexport default class WeatherService implements IWeatherService {\r\n  GetLocation = (latitude: number, longtitude: number): Promise<string> => {\r\n    return new Promise<string>((res, rej) => {\r\n      fetch(\r\n        fetchUrl + `/api/location/search/?lattlong=${latitude},${longtitude}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: { \"Content-Type\": \"application/json\" }\r\n        }\r\n      )\r\n        .then(x => {\r\n          if (!x.ok) {\r\n            throw new Error(\"not a valid answer!\");\r\n          }\r\n          return x;\r\n        })\r\n        .then(x => x.json())\r\n        .then(x => x[0].woeid)\r\n        .then(x => res(x));\r\n    });\r\n  };\r\n\r\n  FetchWeather(woeid: string): Promise<IWeatherState> {\r\n    return new Promise<IWeatherState>((res, rej) => {\r\n      fetch(fetchUrl + `/api/location/${woeid}/`, {\r\n        method: \"GET\",\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n      })\r\n        .then(x => {\r\n          if (!x.ok) {\r\n            throw new Error(\"not a valid answer!\");\r\n          }\r\n          return x;\r\n        })\r\n        .then(x => x.json())\r\n        .then(x => {\r\n          const result: IWeatherState = {\r\n            title: x.title,\r\n            timezone: x.timezone,\r\n            days: []\r\n          };\r\n\r\n          x.consolidated_weather.forEach((t:any) => {\r\n            const shorten = t.weather_state_abbr;\r\n\r\n            const day: IDate = {\r\n              temp_min: t.min_temp,\r\n              temp_avg: t.the_temp,\r\n              temp_max: t.max_temp,\r\n              weather_state_abbr: t.weather_state_abbr,\r\n              applicable_date: new Date(t.applicable_date),\r\n              pic: `${picUrl}/static/img/weather/${shorten}.svg`,\r\n              id: t.id\r\n            };\r\n            result.days.push(day);\r\n          });\r\n\r\n          res(result);\r\n        })\r\n        .catch(err => {\r\n          console.log(\"ERROR\", err);\r\n          rej(err);\r\n        });\r\n    });\r\n  }\r\n}\r\n","import WeatherService from \"./WeatherService\";\r\n\r\nexport default WeatherService;\r\n","import * as React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport configureStore from \"./store\";\r\n\r\nimport \"./styles.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport { IWeatherService } from \"./Interfaces/IWeatherService\";\r\nimport WeatherService from \"./service\";\r\nimport WeatherContext from \"./context\";\r\n\r\nconst store = configureStore();\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nconst weatherService: IWeatherService = new WeatherService();\r\n\r\nrender(\r\n  <WeatherContext.Provider value={weatherService}>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Route component={App} />\r\n      </Router>\r\n    </Provider>\r\n  </WeatherContext.Provider>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}